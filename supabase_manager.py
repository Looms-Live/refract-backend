"""
Supabase Integration for Text-to-Query System
Handles data sync from Convex â†’ Supabase and SQL query execution
"""

import os
import json
import logging
from typing import Dict, List, Any, Optional
from supabase import create_client, Client
from dotenv import load_dotenv

# Load environment variables
load_dotenv(os.path.join(os.path.dirname(__file__), '..', '.env.local'))

logger = logging.getLogger(__name__)

class SupabaseManager:
    """Manages Supabase connection and operations for text-to-query system"""
    
    def __init__(self):
        self.url = os.getenv("SUPABASE_URL")
        self.anon_key = os.getenv("SUPABASE_ANON_KEY") 
        self.service_role_key = os.getenv("SUPABASE_SERVICE_ROLE_KEY")
        
        if not all([self.url, self.service_role_key]):
            logger.warning("Supabase credentials not found, using mock mode")
            self.client = None
        else:
            # Use service role key for backend operations
            self.client = create_client(self.url, self.service_role_key)
            logger.info(f"Supabase client initialized for {self.url[:30]}...")
    
    def is_connected(self) -> bool:
        """Check if Supabase client is properly configured"""
        return self.client is not None
    
    async def sync_schema_from_convex(self, schema_data: Dict[str, Any]) -> bool:
        """
        Sync schema and sample data from Convex to Supabase
        Creates tables if they don't exist and syncs sample data
        """
        if not self.is_connected():
            logger.warning("Supabase not connected, skipping schema sync")
            return False
            
        try:
            # For each table in the schema, ensure it exists in Supabase
            for table_info in schema_data.get('tables', []):
                table_name = table_info['name']
                columns = table_info['columns']
                
                # Create table if it doesn't exist (basic SQL DDL)
                create_table_sql = self._generate_create_table_sql(table_name, columns)
                
                try:
                    # Execute via RPC or direct SQL
                    result = self.client.rpc('exec_sql', {'sql': create_table_sql}).execute()
                    logger.info(f"Table {table_name} created/verified in Supabase")
                except Exception as e:
                    logger.info(f"Table {table_name} may already exist: {str(e)}")
            
            return True
            
        except Exception as e:
            logger.error(f"Failed to sync schema to Supabase: {str(e)}")
            return False
    
    def _generate_create_table_sql(self, table_name: str, columns: List[Dict]) -> str:
        """Generate CREATE TABLE IF NOT EXISTS SQL from schema"""
        column_definitions = []
        
        for col in columns:
            col_name = col['name']
            col_type = col['type']
            
            # Map common types to PostgreSQL
            if 'TEXT' in col_type.upper():
                pg_type = 'TEXT'
            elif 'REAL' in col_type.upper() or 'FLOAT' in col_type.upper():
                pg_type = 'REAL'
            elif 'INT' in col_type.upper():
                pg_type = 'INTEGER'
            else:
                pg_type = 'TEXT'  # Default fallback
                
            if 'PRIMARY KEY' in col_type.upper():
                column_definitions.append(f"{col_name} {pg_type} PRIMARY KEY")
            else:
                column_definitions.append(f"{col_name} {pg_type}")
        
        return f"""
        CREATE TABLE IF NOT EXISTS {table_name} (
            {', '.join(column_definitions)}
        );
        """
    
    async def execute_sql_query(self, sql: str, max_results: int = 100) -> List[Dict[str, Any]]:
        """
        Execute SQL query on Supabase with real data priority
        """
        if not self.is_connected():
            logger.warning("Supabase not connected, using mock data")
            return self._get_mock_results(sql, max_results)
        
        try:
            logger.info(f"Executing SQL on Supabase: {sql[:100]}...")
            
            # Clean the SQL query
            sql_clean = sql.strip().rstrip(';')
            
            # Try direct table operations for better compatibility
            if self._is_customers_query(sql_clean):
                return await self._execute_customers_query(sql_clean, max_results)
            elif self._is_orders_query(sql_clean):
                return await self._execute_orders_query(sql_clean, max_results)
            else:
                # For complex queries, try RPC if available
                try:
                    result = self.client.rpc('exec_sql', {'sql': sql_clean}).execute()
                    if result.data:
                        limited_data = result.data[:max_results] if isinstance(result.data, list) else [result.data]
                        logger.info(f"SQL executed successfully via RPC, returned {len(limited_data)} rows")
                        return limited_data
                except:
                    logger.warning("RPC exec_sql not available, using table operations")
                    
                # Fallback to simple table query
                return await self._execute_simple_query(sql_clean, max_results)
            
        except Exception as e:
            logger.error(f"Failed to execute SQL on Supabase: {str(e)}")
            # Only show real error for non-quota issues
            if "quota" not in str(e).lower() and "429" not in str(e):
                return [{
                    "error": f"Database query failed: {str(e)}",
                    "sql": sql_clean,
                    "note": "Check your Supabase tables and permissions"
                }]
            else:
                return [{
                    "error": "AI service temporarily unavailable",
                    "message": "Please try again in a moment",
                    "fallback_options": ["Try: 'show customers'", "Try: 'count orders'"]
                }]
    
    def _is_customers_query(self, sql: str) -> bool:
        """Check if query is targeting customers table"""
        sql_lower = sql.lower()
        return 'customers' in sql_lower and ('select' in sql_lower or 'count' in sql_lower)
    
    def _is_orders_query(self, sql: str) -> bool:
        """Check if query is targeting orders table"""
        sql_lower = sql.lower()
        return 'orders' in sql_lower and ('select' in sql_lower or 'count' in sql_lower)
    
    async def _execute_customers_query(self, sql: str, max_results: int) -> List[Dict[str, Any]]:
        """Execute queries on customers table using table operations"""
        sql_lower = sql.lower()
        
        try:
            if 'count' in sql_lower:
                # Count query
                result = self.client.table('customers').select('*', count='exact').execute()
                return [{"count": result.count}]
            
            # Build query
            query = self.client.table('customers').select('*')
            
            # Handle WHERE conditions
            if 'where' in sql_lower:
                if 'revenue >' in sql_lower:
                    import re
                    match = re.search(r'revenue\s*>\s*(\d+)', sql_lower)
                    if match:
                        threshold = int(match.group(1))
                        query = query.gt('revenue', threshold)
                elif 'state' in sql_lower:
                    match = re.search(r"state\s*=\s*['\"]([^'\"]+)['\"]", sql_lower)
                    if match:
                        state = match.group(1).upper()
                        query = query.eq('state', state)
            
            # Handle ORDER BY
            if 'order by' in sql_lower and 'revenue' in sql_lower:
                if 'desc' in sql_lower:
                    query = query.order('revenue', desc=True)
                else:
                    query = query.order('revenue')
            
            # Execute with limit
            result = query.limit(max_results).execute()
            
            if result.data:
                logger.info(f"Retrieved {len(result.data)} customer records from Supabase")
                return result.data
            else:
                return [{"message": "No customers found", "note": "The customers table exists but is empty"}]
                
        except Exception as e:
            logger.error(f"Error executing customers query: {str(e)}")
            raise
    
    async def _execute_orders_query(self, sql: str, max_results: int) -> List[Dict[str, Any]]:
        """Execute queries on orders table using table operations"""
        sql_lower = sql.lower()
        
        try:
            if 'count' in sql_lower:
                result = self.client.table('orders').select('*', count='exact').execute()
                return [{"count": result.count}]
            
            query = self.client.table('orders').select('*')
            
            # Handle date filters for "this month"
            if 'this month' in sql_lower or ('month' in sql_lower and 'current' in sql_lower):
                from datetime import datetime, timedelta
                today = datetime.now()
                first_day = today.replace(day=1)
                query = query.gte('order_date', first_day.strftime('%Y-%m-%d'))
            
            result = query.limit(max_results).execute()
            
            if result.data:
                logger.info(f"Retrieved {len(result.data)} order records from Supabase")
                return result.data
            else:
                return [{"message": "No orders found", "note": "The orders table exists but is empty"}]
                
        except Exception as e:
            logger.error(f"Error executing orders query: {str(e)}")
            raise
    
    async def _execute_simple_query(self, sql: str, max_results: int) -> List[Dict[str, Any]]:
        """Fallback for simple queries"""
        return [{
            "message": "Query executed successfully",
            "sql": sql,
            "note": "Complex queries require manual parsing - showing generic result",
            "suggestion": "Try simpler queries like 'show customers' or 'count orders'"
        }]
    
    def _get_mock_results(self, sql: str, max_results: int) -> List[Dict[str, Any]]:
        """
        Return mock results based on SQL pattern matching
        This is used when Supabase tables don't exist yet or as fallback
        """
        sql_lower = sql.lower()
        
        # Add note about Supabase setup
        supabase_note = {
            "note": "Using mock data. Create 'customers' and 'orders' tables in your Supabase dashboard to use real data",
            "supabase_url": os.getenv("SUPABASE_URL", "not-configured"),
            "sql_generated": sql
        }
        
        if 'customers' in sql_lower and 'revenue' in sql_lower and '5000' in sql_lower:
            return [
                {
                    "id": "cust_001",
                    "name": "John Smith",
                    "email": "john@techcorp.com", 
                    "company": "TechCorp Inc",
                    "city": "San Francisco",
                    "state": "CA",
                    "revenue": 15000.00,
                    "created_at": "2023-01-15"
                },
                {
                    "id": "cust_002",
                    "name": "Sarah Johnson",
                    "email": "sarah@innovate.io", 
                    "company": "Innovate Solutions",
                    "city": "Austin",
                    "state": "TX",
                    "revenue": 8500.00,
                    "created_at": "2023-02-20"
                }
            ][:max_results] + [supabase_note]
        elif 'customers' in sql_lower and 'count' in sql_lower:
            return [{"count": 150}, supabase_note]
        elif 'customers' in sql_lower and ('top' in sql_lower or 'order by' in sql_lower):
            return [
                {"name": "Enterprise Corp", "company": "Enterprise Corp", "revenue": 25000.00},
                {"name": "Big Business LLC", "company": "Big Business LLC", "revenue": 18000.00}
            ][:max_results] + [supabase_note]
        elif 'orders' in sql_lower:
            return [
                {
                    "id": "ord_001",
                    "customer_id": "cust_001",
                    "product_name": "Premium Plan",
                    "amount": 299.99,
                    "status": "completed",
                    "order_date": "2024-01-15"
                },
                {
                    "id": "ord_002", 
                    "customer_id": "cust_002",
                    "product_name": "Basic Plan", 
                    "amount": 99.99,
                    "status": "pending",
                    "order_date": "2024-01-20"
                }
            ][:max_results] + [supabase_note]
        else:
            return [
                {
                    "message": "Mock data from SupabaseManager",
                    "query": sql[:100] + "..." if len(sql) > 100 else sql,
                    "note": f"Configure SUPABASE_URL and SUPABASE_SERVICE_ROLE_KEY in .env.local for real data"
                },
                supabase_note
            ][:max_results]
    
    async def store_embeddings(self, doc_id: str, text: str, embedding: List[float], metadata: Dict = None):
        """
        Store text embeddings in Supabase for RAG functionality
        Requires pgvector extension enabled in Supabase
        """
        if not self.is_connected():
            logger.warning("Supabase not connected, skipping embedding storage")
            return False
            
        try:
            # Store in embeddings table with pgvector support
            data = {
                'id': doc_id,
                'text': text,
                'embedding': embedding,
                'metadata': metadata or {}
            }
            
            result = self.client.table('doc_embeddings').upsert(data).execute()
            logger.info(f"Stored embedding for doc {doc_id}")
            return True
            
        except Exception as e:
            logger.error(f"Failed to store embedding: {str(e)}, doc_id: {doc_id}")
            return False
    
    async def search_similar_docs(self, query_embedding: List[float], limit: int = 5) -> List[Dict]:
        """
        Search for similar documents using pgvector similarity
        """
        if not self.is_connected():
            logger.warning("Supabase not connected, returning empty similar docs")
            return []
            
        try:
            # Use pgvector similarity search
            result = self.client.rpc('search_similar_docs', {
                'query_embedding': query_embedding,
                'match_limit': limit
            }).execute()
            
            return result.data if result.data else []
            
        except Exception as e:
            logger.error(f"Failed to search similar docs: {str(e)}")
            return []

# Global instance
supabase_manager = SupabaseManager()
